#!/bin/bash -e
set -x

# debirf module: a3_i915_bpo

# Copyright (C) 2018 Gunter Miegel coinboot.io
#
# This file is part of Coinboot.
#
# Coinboot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# The driver module to support the integrated graphic engine of Intel CPUs is i915.
# This module only comes with the linux-image-extra package in Ubuntu.
# The linux-image-extra package adds ~35M to the installation,
# so we download the linux-image-extra package and extract only i915 module to
# put it in place.
# i915_bpo stands for i915_BackPOrt - so a version backuported from upstream.
# The backported module only supports a limited set of devices.
# To cover the full range we are including the i915 module as well.

# Path of module from linux-image-extra from linux-image-extra e.g.:
# /lib/modules/4.4.0-101-generic/kernel/ubuntu/i915/i915_bpo.ko

# FIXME: Firmware can not be loaded
#[    9.943066] i915_bpo 0000:00:02.0: Direct firmware load for i915/skl_dmc_ver1.bin failed with error -2
#[    9.943069] i915_bpo 0000:00:02.0: Failed to load DMC firmware [https://01.org/linuxgraphics/intel-linux-graphics-firmwares], disabling runtime power management.
# Firmware files mentioned by modinfo of i915_bpo
# firmware:       i915/bxt_dmc_ver1.bin
# firmware:       i915/skl_dmc_ver1.bin
# firmware:       i915/skl_guc_ver6.bin
# Files are located here:
# /lib/firmware/i915/

# For the kernel 4.15 the package with the i915 module is called
# linux-modules-extra-4.15.0-*-generic
# And there is no backuported module.

# TODO: dependcies
# /lib/modules/4.18.0-13-generic/kernel/drivers/iommu/amd_iommu_v2.ko
# /lib/modules/4.18.0-13-generic/amd/amdkfd/


KERNEL_RELEASE=$DEBIRF_KERNEL
if [[ $DEBIRF_KERNEL =~ '4.18' ]]; then
  EXTRA_PACKAGE="linux-modules-extra-$KERNEL_RELEASE"
  FIRMWARE_PACKAGE="linux-firmware"
fi
EXTRA_PACKAGE_FILE=$(debirf_exec apt-cache show $EXTRA_PACKAGE | grep -oP $EXTRA_PACKAGE.*deb)
# There are two linux-firmware packages available.
# One over 'cosmic-main' and a more recent one over 'cosmic-updates'.
# Using 'head -1' to pick the more recent one.
FIRMWARE_PACKAGE_FILE=$(debirf_exec apt-cache show $FIRMWARE_PACKAGE | grep -oP $FIRMWARE_PACKAGE.*deb | head -1)
AMD_PATH="/lib/modules/$KERNEL_RELEASE/kernel/drivers/gpu/drm/amd"
IOMMU_V2="/lib/modules/$KERNEL_RELEASE/kernel/drivers/iommu/amd_iommu_v2.ko"
GPU_SCHED="/lib/modules/$KERNEL_RELEASE/kernel/drivers/gpu/drm/scheduler/gpu-sched.ko"
AMD_FIRMWARE="/lib/firmware/amdgpu/"


# TODO: Download to /tmp in the first place.
debirf_exec apt-get update

debirf_exec apt-get download "$EXTRA_PACKAGE" "$FIRMWARE_PACKAGE"

# FIXME: Remove the hardwired deb file.
# dpkg-deb -x needs a full path!
debirf_exec dpkg -x /$EXTRA_PACKAGE_FILE /tmp/amd/
debirf_exec dpkg -x /$FIRMWARE_PACKAGE_FILE /tmp/firmware

debirf_exec rm -rvf /$EXTRA_PACKAGE_FILE /$FIRMWARE_PACKAGE

debirf_exec cp -rv "/tmp/amd/$AMD_PATH" "$AMD_PATH"
debirf_exec install -vD "/tmp/amd/$IOMMU_V2" "$IOMMU_V2"
debirf_exec install -vD "/tmp/amd/$GPU_SCHED" "$GPU_SCHED"
debirf_exec install -vD "/tmp/firmware/$AMD_FIRMWARE" "$AMD_FIRMWARE"

# Clean up the directories extracted from the extra package.
debirf_exec rm -rvf /tmp/amd /tmp/firmware

chroot /tmp/coinboot/root depmod -a $KERNEL_RELEASE
